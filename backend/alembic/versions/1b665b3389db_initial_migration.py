"""initial migration

Revision ID: 1b665b3389db
Revises: 
Create Date: 2021-01-06 01:54:48.656451

"""
# pylint: disable=no-member
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '1b665b3389db'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('time_created', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('time_updated', sa.DateTime(), nullable=True),
    sa.Column('invitation_code', sa.String(length=10), nullable=False),
    sa.Column('confirmation_needed', sa.Boolean(name='confirmation_needed__bool'), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_groups')),
    sa.UniqueConstraint('invitation_code', name=op.f('uq_groups_invitation_code')),
    sa.UniqueConstraint('name', name=op.f('uq_groups_name'))
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.String(length=36), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password_hash', sa.String(length=120), nullable=False),
    sa.Column('time_created', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('time_updated', sa.DateTime(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(name='is_deleted__bool'), nullable=True),
    sa.Column('is_confirmed', sa.Boolean(name='is_confirmed__bool'), nullable=True),
    sa.Column('can_create_groups', sa.Boolean(name='can_create_groups__bool'), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('password_hash', name=op.f('uq_users_password_hash'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_name'), 'users', ['name'], unique=True)
    op.create_index(op.f('ix_users_uuid'), 'users', ['uuid'], unique=True)
    op.create_table('members',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('time_created', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('time_updated', sa.DateTime(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(name='is_deleted__bool'), nullable=True),
    sa.Column('is_admin', sa.Boolean(name='is_admin__bool'), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name=op.f('fk_members_group_id_groups')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_members_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_members')),
    sa.UniqueConstraint('user_id', 'group_id', name='uq_members_user_group')
    )
    op.create_table('quizzes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('topic', sa.String(length=100), nullable=True),
    sa.Column('is_finalized', sa.Boolean(name='is_finalized__bool'), nullable=True),
    sa.Column('num_questions', sa.Integer(), nullable=False),
    sa.Column('num_options', sa.Integer(), nullable=False),
    sa.Column('time_created', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('time_updated', sa.DateTime(), nullable=True),
    sa.Column('author_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name=op.f('fk_quizzes_author_id_users')),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name=op.f('fk_quizzes_group_id_groups')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_quizzes'))
    )
    op.create_table('tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', sa.String(length=36), nullable=False),
    sa.Column('time_created', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('was_used', sa.Boolean(name='was_used__bool'), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_tokens_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tokens'))
    )
    op.create_index(op.f('ix_tokens_uuid'), 'tokens', ['uuid'], unique=True)
    op.create_table('tournaments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('is_active', sa.Boolean(name='is_active__bool'), nullable=True),
    sa.Column('time_created', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name=op.f('fk_tournaments_group_id_groups')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tournaments'))
    )
    op.create_table('questions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('text', sa.String(length=1000), nullable=True),
    sa.Column('comment', sa.String(length=1000), nullable=True),
    sa.Column('quiz_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['quiz_id'], ['quizzes.id'], name=op.f('fk_questions_quiz_id_quizzes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_questions'))
    )
    op.create_table('rounds',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('finish_time', sa.DateTime(), nullable=False),
    sa.Column('quiz_id', sa.Integer(), nullable=True),
    sa.Column('tournament_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['quiz_id'], ['quizzes.id'], name=op.f('fk_rounds_quiz_id_quizzes')),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], name=op.f('fk_rounds_tournament_id_tournaments')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_rounds'))
    )
    op.create_table('messages',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('text', sa.String(length=1000), nullable=False),
    sa.Column('time_created', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('time_updated', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('round_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name=op.f('fk_messages_group_id_groups')),
    sa.ForeignKeyConstraint(['round_id'], ['rounds.id'], name=op.f('fk_messages_round_id_rounds'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_messages_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_messages'))
    )
    op.create_table('options',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('text', sa.String(length=100), nullable=True),
    sa.Column('is_correct', sa.Boolean(name='is_correct__bool'), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name=op.f('fk_options_question_id_questions'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_options'))
    )
    op.create_table('plays',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('is_submitted', sa.Boolean(name='is_submitted__bool'), nullable=True),
    sa.Column('result', sa.Integer(), nullable=True),
    sa.Column('server_started', sa.DateTime(), nullable=True),
    sa.Column('server_updated', sa.DateTime(), nullable=True),
    sa.Column('client_started', sa.DateTime(), nullable=True),
    sa.Column('client_updated', sa.DateTime(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('round_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['round_id'], ['rounds.id'], name=op.f('fk_plays_round_id_rounds'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_plays_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_plays'))
    )
    op.create_table('answers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('play_id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('option_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['option_id'], ['options.id'], name=op.f('fk_answers_option_id_options')),
    sa.ForeignKeyConstraint(['play_id'], ['plays.id'], name=op.f('fk_answers_play_id_plays'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], name=op.f('fk_answers_question_id_questions')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_answers'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('answers')
    op.drop_table('plays')
    op.drop_table('options')
    op.drop_table('messages')
    op.drop_table('rounds')
    op.drop_table('questions')
    op.drop_table('tournaments')
    op.drop_index(op.f('ix_tokens_uuid'), table_name='tokens')
    op.drop_table('tokens')
    op.drop_table('quizzes')
    op.drop_table('members')
    op.drop_index(op.f('ix_users_uuid'), table_name='users')
    op.drop_index(op.f('ix_users_name'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('groups')
    # ### end Alembic commands ###
